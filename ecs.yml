---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS: cluster template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Existing VPCs parameters'
      Parameters:
        - VPCID
        - VPCCidr
        - SubnetAPublic
        - SubnetBPublic
        - SubnetAPrivate
        - SubnetBPrivate
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - KeyName
      - IAMUserSSHAccess
      - MaxSize
      - MinSize
      - DesiredSize
    - Label:
        default: 'Cluster Parameters'
      Parameters:
      - Environment
      - AppName
      - ApplicationPort
      - SubnetsReach
      - ContainerMaxCPU
      - ContainerMaxMemory
      - DrainingTimeoutInSeconds
    - Label:
        default: 'Auto Scaling Parameters'
      Parameters:
      - MaxCapacity
      - MinCapacity
      - DesiredCapacity
      - MetricName
      - Threshold
      - Statistic
      - PeriodsIncrease
      - PeriodsDecrease
      - ContainerShortageThreshold
      - ContainerExcessThreshold
    - Label:
        default: 'Docker Image Parameters'
      Parameters:
      - S3PathToImage
      - ImageName
    - Label:
        default: 'RDS Parameters'
      Parameters:
      - CreateRDS
      - DataBaseInstanceType
      - DataBaseInstanceName
      - DataBaseName
      - DataBaseUser
      - DataBasePassword
    - Label:
        default: 'Load Balancer Parameters'
      Parameters:
      - LoadBalancerScheme
      - LoadBalancerCertificate
    - Label:
        default: 'Logs'
      Parameters:
      - NewRelicLicenseKey
      - SumoLogicKey
      - SumoLogicID
Parameters:
  CreateRDS:
    Description: 'Should stack create RDS DataBase?'
    Type: String
    AllowedValues: [yes, no]
  MetricName:
    Description: 'The name of the metric associated with the alarm.'
    Type: String
    Default: 'MemoryUtilization'
    AllowedValues: [CPUUtilization, MemoryUtilization]
  Threshold:
    Description: 'The value against which the specified statistic is compared. Specified per one container.'
    Type: String
    Default: '70'
  PeriodsIncrease:
    Description: 'The time over which the specified statistic is applied for adding extra task. Specify time in seconds, in multiples of 60'
    Type: String
    Default: '60'
    AllowedValues: [60,120,240,300,360,420,480,540,600]
  PeriodsDecrease:
    Description: 'The time over which the specified statistic is applied for removing extra task. Specify time in seconds, in multiples of 60'
    Type: String
    Default: '120'
    AllowedValues: [60,120,240,300,360,420,480,540,600]
  S3PathToImage:
    Description: 'Path to docker image at S3 bucker like: Bucketname/Folder/.../Image_Name. Dont need it if use DockerHub`s image'
    Type: String
    Default: ''
  ImageName:
    Description: 'Specify image name at DockerHub, leave this field empty if specified S3`s image'
    Type: String
    Default: 'nginx'
  AppName:
    Description: 'Aplication name.'
    Type: String
    Default: 'app'
  ApplicationPort:
    Description: 'Application Port inside continer.'
    Type: String
    Default: '80'
  DataBaseInstanceType:
    Description: 'The instance type of the Database instances.'
    Type: String
    Default: 'db.t2.micro'  #'db.t2.medium'
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
  DataBaseInstanceName:
    Description: 'The Database instance name. Must contain only letters, digits, or hyphens. If left it empty - name will be ${Environment}-${AppName}-master'
    Type: String
    Default: ''
  DataBaseName:
    Description: 'The Database name. If left it empty - name will be {env}_{app}_master'
    Type: String
    Default: ''
  DataBaseUser:
    Description: 'The Database username. If left it empty - username will be {env}_{app}_master_user'
    Type: String
    Default: ''
  DataBasePassword:
    Description: 'The DataBase password.'
    Type: String
    Default: ''
  Environment:
    Description: 'Environment- prod, test etc.'
    Type: String
    Default: 'production'
  VPCID:
    Description: 'ID of existing VPC'
    Type: AWS::EC2::VPC::Id
    Default: 'vpc-99dcb6fd'
  VPCCidr:
    Description: 'CIDR of existing VPC'
    Type: String
    Default: '10.0.24.0/22'
  SubnetAPublic:
    Description: 'ID of first existing public subnet'
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-xxxx'
  SubnetBPublic:
    Description: 'ID of second existing public subnet'
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-xxxx'
  SubnetAPrivate:
    Description: 'ID of first existing private subnet'
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-xxxx'
  SubnetBPrivate:
    Description: 'ID of second existing private subnet'
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-xxxx'
  SumoLogicID:
    Description: 'Optional SumoLogic Access ID'
    Type: String
    Default: 'xxxx'
  SumoLogicKey:
    Description: 'Optional SumoLogic Access Key'
    Type: String
    Default: 'xxx'
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instances of the ECS cluster.'
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'xxxx'
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access '
    Type: String
    Default: false
    AllowedValues:
    - 'true'
    - 'false'
  NewRelicLicenseKey:
    Description: 'Optional New Relic License Key will install the New Relic Servers for Linux agent.'
    Type: String
    Default: 'xxxxxxx'
  SubnetsReach:
    Description: 'Should the cluster have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: 'Public'
    AllowedValues:
    - 'Public'
    - 'Private'
  LoadBalancerScheme:
    Description: 'Indicates whether the load balancer in front of the ECS cluster is internet-facing or internal.'
    Type: String
    Default: 'internet-facing'
    AllowedValues:
    - 'internet-facing'
    - 'internal'
  LoadBalancerCertificate:
    Description: 'Optional  the SSL certificate to associate with the load balancer.'
    Type: String
    Default: ''
    AllowedValues:
    - ''
    - '*.cyberexposure.com'
    - '*.xxx.com'
    - '*.xxx.com'
  InstanceType:
    Description: 'The instance type of the EC2 instances of the ECS cluster.'
    Type: String
    Default: 't2.micro'
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
  MaxSize:
    Description: 'The maximum size of the Auto Scaling group (EC2).'
    Type: Number
    Default: '4'
    ConstraintDescription: 'Must be >= 1'
    MinValue: '2'
  MinSize:
    Description: 'The minimum size of the Auto Scaling group (EC2).'
    Type: Number
    Default: '2'
    ConstraintDescription: 'Must be >= 1'
    MinValue: '1'
  DesiredSize:
    Description: 'The desired start size of the Auto Scaling group (EC2).'
    Type: Number
    Default: '2'
    ConstraintDescription: 'Must be >= 1'
    MinValue: '1'
  MinCapacity:
    Description: 'The desired minimum capacity of the tasks at Auto Scaling group.'
    Type: Number
    Default: '1'
    MinValue: '0'
  MaxCapacity:
    Description: 'The desired maximum capacity of the tasks at Auto Scaling group.'
    Type: Number
    Default: '4'
    MinValue: '0'
  DesiredCapacity:
    Description: 'The desired capacity of tasks at Auto Scaling group.'
    Type: Number
    Default: '2'
    ConstraintDescription: 'Must be >= 1'
    MinValue: '1'
  DrainingTimeoutInSeconds:
    Description: 'Maximum time in seconds an EC2 instance waits when terminating until all containers are moved to another EC2 instance (draining).'
    Type: Number
    Default: '60'
    ConstraintDescription: 'Must be in the range [60-7200]'
    MinValue: '60'
    MaxValue: '7200'
  ContainerMaxCPU:
    Description: 'The maximum number of cpu reservation per container that you plan to run on this cluster. A container instance has 1,024 CPU units for every CPU core.'
    Type: Number
    Default: '128'
  ContainerMaxMemory:
    Description: 'The maximum number of memory reservation (in MB)  per container that you plan to run on this cluster.'
    Type: Number
    Default: '256'
  ContainerShortageThreshold:
    Description: 'Scale up if free cluster capacity <= containers (based on ContainerMaxCPU and ContainerMaxMemory settings)'
    Type: Number
    Default: '0'
    MinValue: '0'
    ConstraintDescription: 'Must be >= 0'
  ContainerExcessThreshold:
    Description: 'Scale down if free cluster capacity >= containers (based on ContainerMaxCPU and ContainerMaxMemory settings)'
    Type: Number
    Default: '4'
    MinValue: '2'
    ConstraintDescription: 'Must be >= 2'
Mappings:
  RegionMap:
    'eu-west-2':
      ECSAMI: 'ami-ee7d618a'
    'eu-west-1':
      ECSAMI: 'ami-d65dfbaf'
    'ap-northeast-2':
      ECSAMI: 'ami-70d0741e'
    'ap-northeast-1':
      ECSAMI: 'ami-95903df3'
    'ca-central-1':
      ECSAMI: 'ami-fc5fe798'
    'ap-southeast-1':
      ECSAMI: 'ami-c8c98bab'
    'ap-southeast-2':
      ECSAMI: 'ami-e3b75981'
    'eu-central-1':
      ECSAMI: 'ami-ebfb7e84'
    'us-east-1':
      ECSAMI: 'ami-20ff515a'
    'us-east-2':
      ECSAMI: 'ami-b0527dd5'
    'us-west-1':
      ECSAMI: 'ami-b388b4d3'
    'us-west-2':
      ECSAMI: 'ami-3702ca4f'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasNewRelic: !Not [!Equals [!Ref NewRelicLicenseKey, '']]
  HasLoadBalancerSchemeInternal: !Equals [!Ref LoadBalancerScheme, 'internal']
  HasLoadBalancerCertificate: !Not [!Equals [!Ref LoadBalancerCertificate, '']]
  HasNotLoadBalancerCertificate: !Equals [!Ref LoadBalancerCertificate, '']
  HasDBUser: !Not [!Equals [!Ref DataBaseUser, '']]
  HasDBName: !Not [!Equals [!Ref DataBaseName, '']]
  HasDBInstanceName: !Not [!Equals [!Ref DataBaseInstanceName, '']]
  CreateRDS: !Equals [!Ref CreateRDS, 'true']
  S3Image: !Not [!Equals [!Ref S3PathToImage, '']]
  LBCCyberexposure: !Equals [!Ref LoadBalancerCertificate, '*.cyberexposure.com']
  LBCxxx: !Equals [!Ref LoadBalancerCertificate, '*.xxx.com']
  LBCxxxsecurity: !Equals [!Ref LoadBalancerCertificate, '*.xxx.com']
Resources:
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref Role
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AppName}-${Environment}-IAM'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: !Sub '${AppName}-${Environment}-ecs'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DiscoverPollEndpoint'
            Resource: '*'
      - PolicyName: !Sub '${AppName}-${Environment}-ecs-cluster'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DeregisterContainerInstance'
            - 'ecs:RegisterContainerInstance'
            - 'ecs:SubmitContainerStateChange'
            - 'ecs:SubmitTaskStateChange'
            - 'ecs:ListContainerInstances'
            Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}'
      - PolicyName: !Sub '${AppName}-${Environment}-cluster-inst'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:Poll'
            - 'ecs:StartTelemetrySession'
            - 'ecs:UpdateContainerInstancesState'
            - 'ecs:ListTasks'
            - 'ecs:DescribeContainerInstances'
            Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*'
            Condition:
              'StringEquals':
                'ecs:cluster':
                  !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}'
      - PolicyName: !Sub '${AppName}-${Environment}-ecr'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:CompleteLayerUpload'
            - 'ecr:DescribeImages'
            - 'ecr:DescribeRepositories'
            - 'ecr:UploadLayerPart'
            - 'ecr:ListImages'
            - 'ecr:InitiateLayerUpload'
            - 'ecr:PutImage'
            - 'ecr:GetAuthorizationToken'
            - 'ecr:DescribeImages'
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AppName}-${Environment}'
      - PolicyName: !Sub '${AppName}-${Environment}-ecr-token'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecr:GetAuthorizationToken'
            Resource: '*'
      - PolicyName: !Sub '${AppName}-${Environment}-ec2-tag'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:CreateTags'
            Resource: 'arn:aws:ec2:*:*:instance/*'
      - PolicyName: !Sub '${AppName}-${Environment}-logs'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: 'arn:aws:logs:*:*:*'
      - PolicyName: !Sub '${AppName}-${Environment}-autoscaling'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action:
            - 'autoscaling:CompleteLifecycleAction'
            - 'autoscaling:DescribeAutoScalingGroups'
            Resource: '*'
  IAMS3:
    Type: 'AWS::IAM::Policy'
    Condition: S3Image
    Properties:
      Roles:
      - !Ref Role
      PolicyName: !Sub '${AppName}-${Environment}-S3'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:*'
          Resource:
          - !Sub
            - arn:aws:s3:::${NameS3}/*
            - { NameS3: !Select [ "0", !Split [ "/", !Ref S3PathToImage]] }
          - !Sub
            - arn:aws:s3:::${NameS3}
            - { NameS3: !Select [ "0", !Split [ "/", !Ref S3PathToImage]] }
  IAMS31:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - !Ref Role
      PolicyName: !Sub '${AppName}-${Environment}-S31'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:*'
          Resource:
          - arn:aws:s3:::xxx-ecs-hostnames/*
          - arn:aws:s3:::xxx-ecs-hostnames
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref Role
      PolicyName: 'iam-ssh'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ecs-cluster-alb'
      VpcId: !Ref VPCID
      GroupName: !Sub '${AppName}-${Environment}-ALB-SG'
      Tags:
      - Key: Name
        Value: !Sub '${AppName}-${Environment}-ALB-SG'
  SecurityGroupInSSH1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 172.20.254.0/24
  SecurityGroupInSSH2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 172.20.255.0/24
  SecurityGroupInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 192.168.0.0/16
  SecurityGroupInICMP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: !Ref VPCCidr
  ALBSecurityGroupInHttp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
  ALBSecurityGroupInHttps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasLoadBalancerCertificate
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AppName}-${Environment}-EC2-SG'
      GroupDescription: Limit connections to ec2 instances
      VpcId: !Ref VPCID
      Tags:
      - Key: Name
        Value: !Sub '${AppName}-${Environment}-EC2-SG'
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ALBSecurityGroup
        FromPort: 0
        ToPort: 65535
        IpProtocol: tcp
  LoadBalancer: # not monitored, but DefaultTargetGroup is monitored!
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AppName}-${Environment}-ALB'
      Scheme: !Ref LoadBalancerScheme
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Subnets: !If
      - HasLoadBalancerSchemeInternal
      - !Split
        - ','
        - !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
      - !Split
        - ','
        - !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
  DefaultTargetGroup: # this is used as the fall-back target group and is used to health checking the ECS agent. Services use their own ListenerRules to accept traffic based on path prefixes.
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${AppName}-${Environment}-TG'
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,301,302
      Port: 80 # port 80 is a reserved port that is never used by the agent, so we are safe to use it here
      Protocol: HTTP
      VpcId: !Ref VPCID
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: 0
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  HttpsListenerCyberexposure:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HasLoadBalancerCertificate
    Condition: LBCCyberexposure
    Properties:
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:xxx:certificate/96d32a20-3d3b-4013-b4d5-d02fd2acdf21
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
  HttpsListenerxxx:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HasLoadBalancerCertificate
    Condition: LBCxxx
    Properties:
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:xxx:certificate/2bc57751-1d40-41fc-a41c-4ec5440bcebe
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
  HttpsListenerxxxsecurity:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HasLoadBalancerCertificate
    Condition: LBCxxxsecurity
    Properties:
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:xxxx:certificate/57fc67f8-aa44-4e4b-8fed-cf352b7b0b8b
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', ECSAMI]
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: true
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      # BlockDeviceMappings:
      #   - DeviceName: '/dev/sdb'
      #     Ebs:
      #       VolumeSize: "20"
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          bash -ex << "TRY"
            echo "ECS_CLUSTER=${Cluster}" >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          TRY
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
          yum update -y
          rpm -Uvh https://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm
          yum -y install newrelic-sysmond wget

          yum install python-pip -y
          python-pip install awscli --upgrade --user
          export PATH=$PATH:~/.local/bin

          mkdir /root/.aws
          touch /root/.aws/credentials
          echo '
          [default]
          region = ${AWS::Region}
          output = text' > ~/.aws/credentials

          if [[ "$(aws ecr list-images --repository-name ${AppName}-${Environment} --region ${AWS::Region})" ]]; then
            echo "Repo has already contained an image";
          else
            aws s3 cp s3://${S3PathToImage} ./image.tar
            docker pull ${ImageName}
            Var=$(docker load -i image.tar | sed 's/Loaded image://g')
            echo $Var
            echo "Repo is empty"
            aws ecr get-login --no-include-email --region ${AWS::Region} | bash
            docker tag $Var ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-${Environment}:latest
            docker tag ${ImageName} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-${Environment}:latest
            docker push  ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-${Environment}:latest
            rm ./image.tar;
          fi

          sleep $[ ( $RANDOM % 90 )  + 1 ]s

          if [ "$(aws s3 ls s3://xxx-ecs-hostnames | grep ${AppName}-${Environment})" == "" ]; then
            echo  '1.1.1.1 ${AppName}-${Environment}-001-web.xxx.com
                   2.2.2.2 ${AppName}-${Environment}-002-web.xxx.com
                   3.3.3.3 ${AppName}-${Environment}-003-web.xxx.com
                   4.4.4.4 ${AppName}-${Environment}-004-web.xxx.com' > ${AppName}-${Environment}
          else
            aws s3 cp s3://xxx-ecs-hostnames/${AppName}-${Environment} ./${AppName}-${Environment}
          fi


          IPS="$(cat ${AppName}-${Environment} | awk '{print $1}')"

          for IP in $IPS ; do
                  if ping -c 1 $IP &> /dev/null
                          then
                          echo full
                          else
                          echo zero
                  fi
          done >> freeiplist

          FIRSTFREEIP="$(paste ${AppName}-${Environment} freeiplist | grep -w zero | head -n1 | awk '{print $1}')"
          OWNIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
          NEWHOSTNAME="$(grep -w $FIRSTFREEIP ${AppName}-${Environment} | awk '{print $2}')"
          hostname $NEWHOSTNAME
          sed -i 's/HOSTNAME=localhost.localdomain/HOSTNAME='"$NEWHOSTNAME"'/' /etc/sysconfig/network
          sed -i "s/$FIRSTFREEIP/$OWNIP/g" ${AppName}-${Environment}
          aws s3 cp ${AppName}-${Environment} s3://xxxx-ecs-hostnames/${AppName}-${Environment}

          #non-necessary as done once
          #rm freeiplist
          ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 create-tags --resources $ID --tags Key=Name,Value=$NEWHOSTNAME


          mkdir /tmp/logs/production_log/
          # setup sumologic collector
          echo '
          {
             "api.version": "v1",
             "sources": [
               {
                 "sourceType" : "LocalFile",
                 "name": "docker_logs",
                 "category": "aws-ec2",
                 "pathExpression" : "/var/lib/docker/containers/*/*.log",
                 "useAutolineMatching": false,
                 "timeZone": "UTC",
                 "automaticDateParsing": true,
                 "forceTimeZone": false,
                 "defaultDateFormat": "MMM dd HH:mm:ss"
               }
               {
                 "sourceType" : "LocalFile",
                 "name": "downloads_prod_ruby_log",
                 "category": "aws-ec2",
                 "pathExpression" : "/var/log/ruby_log/*",
                 "useAutolineMatching": false,
                 "timeZone": "UTC",
                 "automaticDateParsing": true,
                 "forceTimeZone": false,
                 "defaultDateFormat": "MMM dd HH:mm:ss"
               }
               {
                 "sourceType" : "LocalFile",
                 "name" : "/var/log/messages",
                 "pathExpression" : "/var/log/messages",
                 "category": "aws-ec2",
                 "useAutolineMatching": false,
                 "timeZone": "UTC",
                 "automaticDateParsing": true,
                 "forceTimeZone": false,
                 "defaultDateFormat": "MMM dd HH:mm:ss"
               },
               {
                 "sourceType" : "LocalFile",
                 "name" : "/var/log/secure",
                 "pathExpression" : "/var/log/secure",
                 "category": "aws-ec2",
                 "useAutolineMatching": false,
                 "multilineProcessingEnabled": false,
                 "timeZone": "UTC",
                 "automaticDateParsing": true,
                 "forceTimeZone": false,
                 "defaultDateFormat": "MMM dd HH:mm:ss"
               }
               {
                 "sourceType" : "LocalFile",
                 "name" : "/var/log/syslog",
                 "pathExpression" : "/var/log/syslog",
                 "category": "aws-ec2",
                 "useAutolineMatching": false,
                 "multilineProcessingEnabled": false,
                 "timeZone": "UTC",
                 "automaticDateParsing": true,
                 "forceTimeZone": false,
                 "defaultDateFormat": "MMM dd HH:mm:ss"
               }
               {
                 "sourceType" : "LocalFile",
                 "name" : "production.log",
                 "pathExpression" : "/tmp/logs/production_log/*",
                 "category": "aws-ec2",
                 "useAutolineMatching": false,
                 "multilineProcessingEnabled": false,
                 "timeZone": "UTC",
                 "automaticDateParsing": true,
                 "forceTimeZone": false,
                 "defaultDateFormat": "MMM dd HH:mm:ss"
               }
            ]
          }' > /etc/sumosources.json
          wget "https://collectors.us2.sumologic.com/rest/download/linux/64" -O SumoCollector.sh
          chmod +x SumoCollector.sh
          ./SumoCollector.sh -q -Vsumo.accessid=${SumoLogicID} -Vsumo.accesskey=${SumoLogicKey} -VsyncSources=/etc/sumosources.json -Vcollector.name="$HOSTNAME"
          #
          # restart services after install
          #
          service docker restart
          /etc/init.d/newrelic-sysmond restart
          start ecs
          ## configure NewRelic infrastructure
          echo "license_key: ${NewRelicLicenseKey}" | sudo tee -a /etc/newrelic-infra.yml
          sudo curl -o /etc/yum.repos.d/newrelic-infra.repo https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64/newrelic-infra.repo
          sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'
          sudo yum install newrelic-infra -y
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredSize
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      TargetGroupARNs:
      - !Ref DefaultTargetGroup
      TerminationPolicies:
      - NewestInstance
      VPCZoneIdentifier: !If
      - HasLoadBalancerSchemeInternal
      - !Split
        - ','
        - !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
      - !Split
        - ','
        - !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
      # Tags:
      # # - Key: Name
      # #   Value: !Sub '${NameTag}'
        # PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: 0
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT5M
        WaitOnResourceSignals: false
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AppName}-${Environment}'
  EsrRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Sub '${AppName}-${Environment}'
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub '${AppName}-${Environment}'
      NetworkMode: bridge
      Memory: !Ref ContainerMaxMemory
      Cpu: !Ref ContainerMaxCPU
      ContainerDefinitions:
        - Name: !Sub '${AppName}-${Environment}' # if you change this, you also must change the AWS::ECS::Service
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-${Environment}:latest'
          Memory: !Ref ContainerMaxMemory
          Cpu: !Ref ContainerMaxCPU
          PortMappings:
            - ContainerPort: !Ref ApplicationPort # if you change this, you also must change the AWS::ECS::Service
              Protocol: tcp
          Essential: true
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - HttpListener
    Properties:
      Cluster:
        !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCapacity
      PlacementStrategies:
      - Type: binpack
        Field: memory
      LoadBalancers:
      - ContainerName: !Sub '${AppName}-${Environment}'
        ContainerPort: !Ref ApplicationPort
        TargetGroupArn: !Ref DefaultTargetGroup
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Sub '${AppName}-${Environment}-Primary'
  Service2:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - HttpListener
    Properties:
      Cluster:
        !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCapacity
      PlacementStrategies:
      - Type: binpack
        Field: memory
      LoadBalancers:
      - ContainerName: !Sub '${AppName}-${Environment}'
        ContainerPort: !Ref ApplicationPort
        TargetGroupArn: !Ref DefaultTargetGroup
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Sub '${AppName}-${Environment}-Secondary'
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'
  Cloudwatch:
    Type: AWS::CloudFormation::Stack
    DependsOn: [AutoScalingGroup, Service, Service2]
    Properties:
      Parameters:
        Environment:
          !Ref Environment
        AppName:
          !Ref AppName
        MaxCapacity:
          !Ref MaxCapacity
        MinCapacity:
          !Ref MinCapacity
        MetricName:
          !Ref MetricName
        Threshold:
          !Ref Threshold
        PeriodsIncrease:
          !Ref PeriodsIncrease
        PeriodsDecrease:
          !Ref PeriodsDecrease
        ContainerShortageThreshold:
          !Ref ContainerShortageThreshold
        ContainerExcessThreshold:
          !Ref ContainerExcessThreshold
        ServiceName:
          !GetAtt [Service, Name]
        Service2Name:
          !GetAtt [Service2, Name]
        AutoScalingGroup:
          !Ref AutoScalingGroup
      TemplateURL: https://s3.amazonaws.com/xxx-ecs-stack/ecs-cloudwatch.yml
  Rds:
    Type: AWS::CloudFormation::Stack
    Condition: CreateRDS
    Properties:
      Parameters:
        DataBaseInstanceType:
          !Ref DataBaseInstanceType
        DataBaseInstanceName:
          !Ref DataBaseInstanceName
        DataBaseName:
          !Ref DataBaseName
        DataBaseUser:
          !Ref DataBaseUser
        DataBasePassword:
          !Ref DataBasePassword
        Environment:
          !Ref Environment
        AppName:
          !Ref AppName
        VPCID:
          !Ref VPCID
        SubnetAPrivate:
          !Ref SubnetAPrivate
        SubnetBPrivate:
          !Ref SubnetBPrivate
        SecurityGroup:
          !Ref SecurityGroup
      TemplateURL: https://s3.amazonaws.com/xxxx-ecs-stack/ecs-rds.yml
  Lambda:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment:
          !Ref Environment
        AppName:
          !Ref AppName
        ContainerMaxCPU:
          !Ref ContainerMaxCPU
        ContainerMaxMemory:
          !Ref ContainerMaxMemory
      TemplateURL: https://s3.amazonaws.com/xxxx-ecs-stack/ecs-lambda.yml
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'ecs/cluster'
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
  Cluster:
    Description: 'ECS cluster.'
    Value: !Ref Cluster
    Export:
      Name: !Sub '${AWS::StackName}-Cluster'
  DataBaseName:
    Description: 'Name of the Data Base.'
    Value: !If
    - HasDBUser
    - !Ref DataBaseName
    - !Sub '${Environment}-${AppName}-master'
    Export:
      Name: !Sub '${AWS::StackName}-DBName'
  DataBaseUser:
    Description: 'Name of the Data Base.'
    Value: !If
    - HasDBUser
    - !Ref DataBaseUser
    - !Sub '${Environment}_${AppName}_master-user'
    Export:
      Name: !Sub '${AWS::StackName}-MasterUsername'
  HttpListener:
    Description: 'ALB HTTP listener for services.'
    Value: !Ref HttpListener
    Export:
      Name: !Sub '${AWS::StackName}-HttpListener'
  HttpsListenerCyberexposure:
    Condition: LBCCyberexposure
    Description: 'ALB HTTPS listener for services.'
    Value: !Ref HttpsListenerCyberexposure
    Export:
      Name: !Sub '${AWS::StackName}-HttpsListener'
  HttpsListenerxxx:
    Condition: LBCxxxx
    Description: 'ALB HTTPS listener for services.'
    Value: !Ref HttpsListenerxxxx
    Export:
      Name: !Sub '${AWS::StackName}-HttpsListener'
  HttpsListenerxxxxsecurity:
    Condition: LBCxxxxsecurity
    Description: 'ALB HTTPS listener for services.'
    Value: !Ref HttpsListenerxxxxsecurity
    Export:
      Name: !Sub '${AWS::StackName}-HttpsListener'
  CanonicalHostedZoneID:
    Description: 'The ID of the Amazon Route 53 hosted zone associated with the load balancer.'
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${AWS::StackName}-CanonicalHostedZoneID'
  VPC:
    Description: 'VPC of ECS cluster.'
    Value: !Ref VPCID
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SecurityGroup:
    Description: 'Security Group of ECS cluster.'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  DNSName:
    Description: 'The DNS name for the ECS cluster load balancer.'
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the ECS cluster.'
    Value: !Sub 'http://${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
